# analysis_tab.py - Ë©≥Á¥∞ÂàÜÊûêÊ©üËÉΩÔºàPhase 4.0-3Ôºâ
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
import json

def render_analysis_tab(session_state, asin_helpers_available, sp_api_available):
    """Ë©≥Á¥∞ÂàÜÊûê„Çø„Éñ"""
    
    st.header("üî¨ Ë©≥Á¥∞ÂàÜÊûê - Phase 4.0-3")
    
    # „Éá„Éº„ÇøÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
    df = session_state.get('processed_df')
    if df is None or df.empty:
        st.warning("üìã „Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Çì„Åß„Åè„Å†„Åï„ÅÑÔºà„Éá„Éº„ÇøÁÆ°ÁêÜ„Çø„ÉñÔºâ")
        render_demo_analysis()
        return
    
    # ÂàÜÊûê„Çø„Ç§„ÉóÈÅ∏Êäû
    analysis_type = st.selectbox(
        "üîç ÂàÜÊûê„Çø„Ç§„Éó„ÇíÈÅ∏Êäû:",
        [
            "ÁæéÂÆπÁî®Ë™ûÂäπÊûúÂàÜÊûê",
            "„Éñ„É©„É≥„ÉâÂà•ÂàÜÊûê", 
            "PrimeÂΩ±ÈüøÂ∫¶ÂàÜÊûê",
            "ÈÖçÈÄÅÊôÇÈñìÁõ∏Èñ¢ÂàÜÊûê",
            "ÊàêÂäüÁéá‰∫àÊ∏¨ÂàÜÊûê",
            "Á∑èÂêàÁõ∏Èñ¢ÂàÜÊûê"
        ],
        help="ÂÆüË°å„Åó„Åü„ÅÑÂàÜÊûê„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    )
    
    st.markdown("---")
    
    # ÂàÜÊûêÂÆüË°å
    if analysis_type == "ÁæéÂÆπÁî®Ë™ûÂäπÊûúÂàÜÊûê":
        render_beauty_terms_analysis(df)
    elif analysis_type == "„Éñ„É©„É≥„ÉâÂà•ÂàÜÊûê":
        render_brand_analysis(df)
    elif analysis_type == "PrimeÂΩ±ÈüøÂ∫¶ÂàÜÊûê":
        render_prime_impact_analysis(df)
    elif analysis_type == "ÈÖçÈÄÅÊôÇÈñìÁõ∏Èñ¢ÂàÜÊûê":
        render_shipping_correlation_analysis(df)
    elif analysis_type == "ÊàêÂäüÁéá‰∫àÊ∏¨ÂàÜÊûê":
        render_success_prediction_analysis(df)
    elif analysis_type == "Á∑èÂêàÁõ∏Èñ¢ÂàÜÊûê":
        render_comprehensive_correlation_analysis(df)

def render_demo_analysis():
    """„Éá„É¢ÂàÜÊûêË°®Á§∫"""
    st.info("üí° „Éá„É¢„Éá„Éº„Çø„ÅßÂàÜÊûêÊ©üËÉΩ„ÇíË°®Á§∫„Åó„Å¶„ÅÑ„Åæ„Åô")
    
    # „Éá„É¢ÁæéÂÆπÁî®Ë™ûÂàÜÊûê
    st.subheader("üíÑ ÁæéÂÆπÁî®Ë™ûÂäπÊûúÂàÜÊûêÔºà„Éá„É¢Ôºâ")
    
    demo_beauty_data = {
        'keyword': ['oil', 'cream', 'serum', 'lotion', 'mask'],
        'count': [25, 18, 15, 12, 8],
        'avg_shopee_score': [78.5, 82.1, 85.3, 74.2, 79.8],
        'avg_prime_score': [72.4, 75.8, 81.2, 68.9, 73.5]
    }
    
    demo_df = pd.DataFrame(demo_beauty_data)
    
    # ÁæéÂÆπÁî®Ë™ûÂà•„Çπ„Ç≥„Ç¢ÊØîËºÉÔºà„Éá„É¢Ôºâ
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        name='ShopeeÈÅ©ÊÄß„Çπ„Ç≥„Ç¢',
        x=demo_df['keyword'],
        y=demo_df['avg_shopee_score'],
        marker_color='#10B981'
    ))
    
    fig.add_trace(go.Bar(
        name='Prime‰ø°È†ºÊÄß„Çπ„Ç≥„Ç¢',
        x=demo_df['keyword'],
        y=demo_df['avg_prime_score'],
        marker_color='#3B82F6'
    ))
    
    fig.update_layout(
        title='ÁæéÂÆπÁî®Ë™ûÂà•Âπ≥Âùá„Çπ„Ç≥„Ç¢ÊØîËºÉÔºà„Éá„É¢Ôºâ',
        xaxis_title='ÁæéÂÆπÁî®Ë™û',
        yaxis_title='Âπ≥Âùá„Çπ„Ç≥„Ç¢',
        barmode='group',
        height=500
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # „Éá„É¢Ë©≥Á¥∞„Éá„Éº„ÇøË°®Á§∫
    st.subheader("üìä ÁæéÂÆπÁî®Ë™ûË©≥Á¥∞„Éá„Éº„ÇøÔºà„Éá„É¢Ôºâ")
    st.dataframe(demo_df, use_container_width=True)

def render_beauty_terms_analysis(df):
    """ÁæéÂÆπÁî®Ë™ûÂäπÊûúÂàÜÊûê"""
    st.subheader("üíÑ ÁæéÂÆπÁî®Ë™ûÂäπÊûúÂàÜÊûê")
    
    # ÁæéÂÆπÁî®Ë™û„ÅÆÊ§úÂá∫
    beauty_keywords = ['oil', 'cream', 'serum', 'lotion', 'cleanser', 'mask', 'treatment', 'toner', 'essence', 'gel']
    
    if 'clean_title' not in df.columns:
        st.warning("ÂïÜÂìÅ„Çø„Ç§„Éà„É´ÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
        return
    
    beauty_data = []
    for keyword in beauty_keywords:
        keyword_df = df[df['clean_title'].str.contains(keyword, case=False, na=False)]
        if len(keyword_df) > 0:
            avg_shopee_score = keyword_df.get('shopee_suitability_score', pd.Series([0])).mean()
            avg_prime_score = keyword_df.get('prime_confidence_score', pd.Series([0])).mean()
            avg_relevance = keyword_df.get('relevance_score', pd.Series([0])).mean()
            count = len(keyword_df)
            group_a_rate = len(keyword_df[keyword_df.get('shopee_group') == 'A']) / len(keyword_df) * 100 if 'shopee_group' in keyword_df.columns else 0
            
            beauty_data.append({
                'keyword': keyword,
                'count': count,
                'avg_shopee_score': avg_shopee_score,
                'avg_prime_score': avg_prime_score,
                'avg_relevance': avg_relevance,
                'group_a_rate': group_a_rate
            })
    
    if beauty_data:
        beauty_df = pd.DataFrame(beauty_data)
        
        # ÁæéÂÆπÁî®Ë™ûÂàÜÊûê„ÉÅ„É£„Éº„Éà
        analysis_col1, analysis_col2 = st.columns(2)
        
        with analysis_col1:
            # ÁæéÂÆπÁî®Ë™ûÂà•„Çπ„Ç≥„Ç¢ÊØîËºÉ
            fig1 = go.Figure()
            
            fig1.add_trace(go.Bar(
                name='ShopeeÈÅ©ÊÄß„Çπ„Ç≥„Ç¢',
                x=beauty_df['keyword'],
                y=beauty_df['avg_shopee_score'],
                marker_color='#10B981'
            ))
            
            fig1.add_trace(go.Bar(
                name='Prime‰ø°È†ºÊÄß„Çπ„Ç≥„Ç¢',
                x=beauty_df['keyword'],
                y=beauty_df['avg_prime_score'],
                marker_color='#3B82F6'
            ))
            
            fig1.update_layout(
                title='ÁæéÂÆπÁî®Ë™ûÂà•Âπ≥Âùá„Çπ„Ç≥„Ç¢ÊØîËºÉ',
                xaxis_title='ÁæéÂÆπÁî®Ë™û',
                yaxis_title='Âπ≥Âùá„Çπ„Ç≥„Ç¢',
                barmode='group',
                height=400
            )
            
            st.plotly_chart(fig1, use_container_width=True)
        
        with analysis_col2:
            # ÂïÜÂìÅÊï∞„Å®„Ç∞„É´„Éº„ÉóAÁéá„ÅÆÁõ∏Èñ¢
            fig2 = px.scatter(
                beauty_df,
                x='count',
                y='group_a_rate',
                size='avg_shopee_score',
                color='avg_prime_score',
                hover_name='keyword',
                title='ÂïÜÂìÅÊï∞ vs „Ç∞„É´„Éº„ÉóAÁéá',
                labels={'count': 'ÂïÜÂìÅÊï∞', 'group_a_rate': '„Ç∞„É´„Éº„ÉóAÁéá(%)'}
            )
            
            fig2.update_layout(height=400)
            st.plotly_chart(fig2, use_container_width=True)
        
        # Ë©≥Á¥∞„Éá„Éº„ÇøË°®Á§∫
        st.subheader("üìä ÁæéÂÆπÁî®Ë™ûË©≥Á¥∞„Éá„Éº„Çø")
        
        # „Éá„Éº„Çø„ÇíË¶ã„ÇÑ„Åô„ÅèÊï¥ÂΩ¢
        display_df = beauty_df.copy()
        display_df['avg_shopee_score'] = display_df['avg_shopee_score'].round(1)
        display_df['avg_prime_score'] = display_df['avg_prime_score'].round(1)
        display_df['avg_relevance'] = display_df['avg_relevance'].round(1)
        display_df['group_a_rate'] = display_df['group_a_rate'].round(1)
        
        # „Ç´„É©„É†Âêç„ÇíÊó•Êú¨Ë™û„Å´
        display_df.columns = ['ÁæéÂÆπÁî®Ë™û', 'ÂïÜÂìÅÊï∞', 'ShopeeÈÅ©ÊÄßÂπ≥Âùá', 'Prime‰ø°È†ºÊÄßÂπ≥Âùá', 'Èñ¢ÈÄ£ÊÄßÂπ≥Âùá', '„Ç∞„É´„Éº„ÉóAÁéá(%)']
        
        st.dataframe(display_df, use_container_width=True)
        
        # „Éà„ÉÉ„ÉóÁæéÂÆπÁî®Ë™û„ÅÆÂàÜÊûê
        top_keywords = beauty_df.nlargest(3, 'avg_shopee_score')
        st.subheader("üèÜ „Éà„ÉÉ„ÉóÁæéÂÆπÁî®Ë™û")
        
        for idx, row in top_keywords.iterrows():
            st.markdown(f"""
            **{row['keyword'].upper()}**
            - ÂïÜÂìÅÊï∞: {row['count']}‰ª∂
            - ShopeeÈÅ©ÊÄß: {row['avg_shopee_score']:.1f}ÁÇπ
            - Prime‰ø°È†ºÊÄß: {row['avg_prime_score']:.1f}ÁÇπ
            - „Ç∞„É´„Éº„ÉóAÁéá: {row['group_a_rate']:.1f}%
            """)
    else:
        st.info("ÁæéÂÆπÁî®Ë™û„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü")

def render_brand_analysis(df):
    """„Éñ„É©„É≥„ÉâÂà•ÂàÜÊûê"""
    st.subheader("üè∑Ô∏è „Éñ„É©„É≥„ÉâÂà•ÂàÜÊûê")
    
    if 'extracted_brand' not in df.columns:
        st.warning("„Éñ„É©„É≥„ÉâÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
        return
    
    # „Éñ„É©„É≥„Éâ„Éá„Éº„Çø„ÅÆ„ÇØ„É™„Éº„Éã„É≥„Ç∞
    brand_df = df[df['extracted_brand'].notna() & (df['extracted_brand'] != '')].copy()
    
    if len(brand_df) == 0:
        st.info("„Éñ„É©„É≥„Éâ„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
        return
    
    brand_analysis_col1, brand_analysis_col2 = st.columns(2)
    
    with brand_analysis_col1:
        # „Éñ„É©„É≥„ÉâÂà•ÂïÜÂìÅÊï∞ÔºàTop 10Ôºâ
        brand_counts = brand_df['extracted_brand'].value_counts().head(10)
        
        fig1 = px.pie(
            values=brand_counts.values,
            names=brand_counts.index,
            title="„Éñ„É©„É≥„ÉâÂà•ÂïÜÂìÅÊï∞ÂàÜÂ∏ÉÔºàTop 10Ôºâ",
            height=400
        )
        st.plotly_chart(fig1, use_container_width=True)
    
    with brand_analysis_col2:
        # „Éñ„É©„É≥„ÉâÂà•„Çπ„Ç≥„Ç¢ÂàÜÊûê
        if 'shopee_suitability_score' in brand_df.columns:
            brand_scores = brand_df.groupby('extracted_brand').agg({
                'shopee_suitability_score': 'mean',
                'prime_confidence_score': 'mean' if 'prime_confidence_score' in brand_df.columns else lambda x: 0,
                'extracted_brand': 'count'
            }).round(2)
            
            brand_scores = brand_scores.rename(columns={'extracted_brand': 'count'})
            brand_scores = brand_scores[brand_scores['count'] >= 2].head(10)  # 2‰ª∂‰ª•‰∏ä„ÅÆ„Éñ„É©„É≥„Éâ„ÅÆ„Åø
            
            if len(brand_scores) > 0:
                fig2 = go.Figure()
                
                fig2.add_trace(go.Scatter(
                    x=brand_scores.index,
                    y=brand_scores['shopee_suitability_score'],
                    mode='markers+lines',
                    name='ShopeeÈÅ©ÊÄß„Çπ„Ç≥„Ç¢',
                    marker=dict(size=10, color='#10B981'),
                    line=dict(color='#10B981', width=2)
                ))
                
                if 'prime_confidence_score' in brand_df.columns:
                    fig2.add_trace(go.Scatter(
                        x=brand_scores.index,
                        y=brand_scores['prime_confidence_score'],
                        mode='markers+lines',
                        name='Prime‰ø°È†ºÊÄß„Çπ„Ç≥„Ç¢',
                        marker=dict(size=10, color='#3B82F6'),
                        line=dict(color='#3B82F6', width=2)
                    ))
                
                fig2.update_layout(
                    title='„Éñ„É©„É≥„ÉâÂà•Âπ≥Âùá„Çπ„Ç≥„Ç¢',
                    xaxis_title='„Éñ„É©„É≥„Éâ',
                    yaxis_title='Âπ≥Âùá„Çπ„Ç≥„Ç¢',
                    height=400,
                    xaxis_tickangle=-45
                )
                
                st.plotly_chart(fig2, use_container_width=True)
    
    # „Éñ„É©„É≥„Éâ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË©≥Á¥∞
    st.subheader("üìä „Éñ„É©„É≥„Éâ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË©≥Á¥∞")
    
    brand_performance = brand_df.groupby('extracted_brand').agg({
        'shopee_suitability_score': ['mean', 'std', 'count'],
        'prime_confidence_score': 'mean' if 'prime_confidence_score' in brand_df.columns else lambda x: 0,
        'shopee_group': lambda x: (x == 'A').sum() / len(x) * 100 if 'shopee_group' in brand_df.columns else 0
    }).round(2)
    
    # „Ç´„É©„É†Âêç„ÇíÂπ≥Âù¶Âåñ
    brand_performance.columns = ['ShopeeÈÅ©ÊÄßÂπ≥Âùá', 'ShopeeÈÅ©ÊÄßÊ®ôÊ∫ñÂÅèÂ∑Æ', 'ÂïÜÂìÅÊï∞', 'Prime‰ø°È†ºÊÄßÂπ≥Âùá', '„Ç∞„É´„Éº„ÉóAÁéá(%)']
    brand_performance = brand_performance[brand_performance['ÂïÜÂìÅÊï∞'] >= 2].head(15)
    
    if len(brand_performance) > 0:
        st.dataframe(brand_performance, use_container_width=True)
        
        # „Éà„ÉÉ„Éó„Éñ„É©„É≥„Éâ„ÅÆÁâπÂæ¥
        top_brand = brand_performance.loc[brand_performance['ShopeeÈÅ©ÊÄßÂπ≥Âùá'].idxmax()]
        st.success(f"""
        üèÜ **ÊúÄÈ´ò„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Éñ„É©„É≥„Éâ**: {top_brand.name}
        - ShopeeÈÅ©ÊÄß: {top_brand['ShopeeÈÅ©ÊÄßÂπ≥Âùá']:.1f}ÁÇπ
        - ÂïÜÂìÅÊï∞: {top_brand['ÂïÜÂìÅÊï∞']:.0f}‰ª∂
        - „Ç∞„É´„Éº„ÉóAÁéá: {top_brand['„Ç∞„É´„Éº„ÉóAÁéá(%)']:.1f}%
        """)

def render_prime_impact_analysis(df):
    """PrimeÂΩ±ÈüøÂ∫¶ÂàÜÊûê"""
    st.subheader("üéØ PrimeÂΩ±ÈüøÂ∫¶ÂàÜÊûê")
    
    if 'is_prime' not in df.columns:
        st.warning("PrimeÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
        return
    
    prime_analysis_col1, prime_analysis_col2 = st.columns(2)
    
    with prime_analysis_col1:
        # Prime vs ÈùûPrimeÊØîËºÉ
        if 'shopee_suitability_score' in df.columns:
            prime_data = df[df['is_prime'] == True]['shopee_suitability_score']
            non_prime_data = df[df['is_prime'] == False]['shopee_suitability_score']
            
            fig1 = go.Figure()
            
            if len(prime_data) > 0:
                fig1.add_trace(go.Box(
                    y=prime_data,
                    name='PrimeÂïÜÂìÅ',
                    marker_color='#10B981'
                ))
            
            if len(non_prime_data) > 0:
                fig1.add_trace(go.Box(
                    y=non_prime_data,
                    name='ÈùûPrimeÂïÜÂìÅ',
                    marker_color='#EF4444'
                ))
            
            fig1.update_layout(
                title='PrimeÊúâÁÑ°„Å´„Çà„ÇãShopeeÈÅ©ÊÄß„Çπ„Ç≥„Ç¢ÂàÜÂ∏É',
                yaxis_title='ShopeeÈÅ©ÊÄß„Çπ„Ç≥„Ç¢',
                height=400
            )
            
            st.plotly_chart(fig1, use_container_width=True)
    
    with prime_analysis_col2:
        # PrimeÁµ±Ë®à„Çµ„Éû„É™„Éº
        prime_count = len(df[df['is_prime'] == True])
        non_prime_count = len(df[df['is_prime'] == False])
        total_count = len(df)
        
        st.markdown(f"""
        <div class="analysis-container">
            <h4>üìä PrimeÁµ±Ë®à„Çµ„Éû„É™„Éº</h4>
            <p><strong>PrimeÂïÜÂìÅ</strong>: {prime_count}‰ª∂ ({prime_count/total_count*100:.1f}%)</p>
            <p><strong>ÈùûPrimeÂïÜÂìÅ</strong>: {non_prime_count}‰ª∂ ({non_prime_count/total_count*100:.1f}%)</p>
        </div>
        """, unsafe_allow_html=True)
        
        if 'shopee_suitability_score' in df.columns:
            prime_avg = df[df['is_prime'] == True]['shopee_suitability_score'].mean()
            non_prime_avg = df[df['is_prime'] == False]['shopee_suitability_score'].mean()
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("PrimeÂπ≥Âùá„Çπ„Ç≥„Ç¢", f"{prime_avg:.1f}", delta=f"{prime_avg - non_prime_avg:.1f}")
            with col2:
                st.metric("ÈùûPrimeÂπ≥Âùá„Çπ„Ç≥„Ç¢", f"{non_prime_avg:.1f}")
    
    # PrimeÂäπÊûú„ÅÆÁµ±Ë®àÁöÑÊ§úÂÆö
    if 'shopee_suitability_score' in df.columns and len(prime_data) > 0 and len(non_prime_data) > 0:
        st.subheader("üìà Áµ±Ë®àÁöÑÂàÜÊûê")
        
        # tÊ§úÂÆöÂÆüË°å
        t_stat, p_value = stats.ttest_ind(prime_data, non_prime_data)
        
        significance_level = 0.05
        is_significant = p_value < significance_level
        
        st.markdown(f"""
        **Áµ±Ë®àÁöÑÊ§úÂÆöÁµêÊûú**:
        - tÁµ±Ë®àÈáè: {t_stat:.3f}
        - pÂÄ§: {p_value:.6f}
        - ÊúâÊÑèÊ∞¥Ê∫ñ: {significance_level}
        - ÁµêÊûú: {'Áµ±Ë®àÁöÑ„Å´ÊúâÊÑè„Å™Â∑Æ„ÅÇ„Çä' if is_significant else 'Áµ±Ë®àÁöÑ„Å´ÊúâÊÑè„Å™Â∑Æ„Å™„Åó'}
        
        üí° **Ëß£Èáà**: PrimeÂïÜÂìÅ„Å®ÈùûPrimeÂïÜÂìÅ„ÅÆÈñì„Å´{'„ÅØ' if is_significant else '„ÅØ'}Áµ±Ë®àÁöÑ„Å´ÊúâÊÑè„Å™ÈÅ©ÊÄß„Çπ„Ç≥„Ç¢„ÅÆÂ∑Æ„Åå{'„ÅÇ„Çä„Åæ„Åô' if is_significant else '„ÅÇ„Çä„Åæ„Åõ„Çì'}„ÄÇ
        """)

def render_shipping_correlation_analysis(df):
    """ÈÖçÈÄÅÊôÇÈñìÁõ∏Èñ¢ÂàÜÊûê"""
    st.subheader("üöö ÈÖçÈÄÅÊôÇÈñìÁõ∏Èñ¢ÂàÜÊûê")
    
    if 'ship_hours' not in df.columns:
        st.warning("ÈÖçÈÄÅÊôÇÈñìÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
        return
    
    ship_data = df[df['ship_hours'].notna()].copy()
    
    if len(ship_data) == 0:
        st.info("ÈÖçÈÄÅÊôÇÈñì„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")
        return
    
    shipping_col1, shipping_col2 = st.columns(2)
    
    with shipping_col1:
        # ÈÖçÈÄÅÊôÇÈñì„Å®„Çπ„Ç≥„Ç¢„ÅÆÊï£Â∏ÉÂõ≥
        if 'shopee_suitability_score' in ship_data.columns:
            fig1 = px.scatter(
                ship_data,
                x='ship_hours',
                y='shopee_suitability_score',
                title='ÈÖçÈÄÅÊôÇÈñì vs ShopeeÈÅ©ÊÄß„Çπ„Ç≥„Ç¢',
                trendline='ols',
                hover_data=['asin'] if 'asin' in ship_data.columns else None,
                color='is_prime' if 'is_prime' in ship_data.columns else None,
                color_discrete_map={True: '#10B981', False: '#EF4444'}
            )
            
            fig1.update_layout(
                xaxis_title='ÈÖçÈÄÅÊôÇÈñìÔºàÊôÇÈñìÔºâ',
                yaxis_title='ShopeeÈÅ©ÊÄß„Çπ„Ç≥„Ç¢',
                height=400
            )
            
            st.plotly_chart(fig1, use_container_width=True)
    
    with shipping_col2:
        # ÈÖçÈÄÅÊôÇÈñì„Ç´„ÉÜ„Ç¥„É™Âà•ÂàÜÊûê
        ship_categories = pd.cut(
            ship_data['ship_hours'], 
            bins=[0, 12, 24, 48, float('inf')], 
            labels=['12h‰ª•ÂÜÖ', '12-24h', '24-48h', '48hË∂Ö']
        )
        
        ship_data['ship_category'] = ship_categories
        
        category_analysis = ship_data.groupby('ship_category').agg({
            'shopee_suitability_score': ['mean', 'count'],
            'prime_confidence_score': 'mean' if 'prime_confidence_score' in ship_data.columns else lambda x: 0
        }).round(2)
        
        # „Ç´„É©„É†Âêç„ÇíÂπ≥Âù¶Âåñ
        category_analysis.columns = ['ShopeeÈÅ©ÊÄßÂπ≥Âùá', 'ÂïÜÂìÅÊï∞', 'Prime‰ø°È†ºÊÄßÂπ≥Âùá']
        
        fig2 = px.bar(
            x=category_analysis.index,
            y=category_analysis['ShopeeÈÅ©ÊÄßÂπ≥Âùá'],
            title='ÈÖçÈÄÅÊôÇÈñì„Ç´„ÉÜ„Ç¥„É™Âà•Âπ≥Âùá„Çπ„Ç≥„Ç¢',
            labels={'x': 'ÈÖçÈÄÅÊôÇÈñì„Ç´„ÉÜ„Ç¥„É™', 'y': 'ShopeeÈÅ©ÊÄßÂπ≥Âùá„Çπ„Ç≥„Ç¢'},
            color=category_analysis['ShopeeÈÅ©ÊÄßÂπ≥Âùá'],
            color_continuous_scale='Viridis'
        )
        
        fig2.update_layout(height=400)
        st.plotly_chart(fig2, use_container_width=True)
    
    # ÈÖçÈÄÅÊôÇÈñìË©≥Á¥∞Áµ±Ë®à
    st.subheader("üìä ÈÖçÈÄÅÊôÇÈñìË©≥Á¥∞Áµ±Ë®à")
    st.dataframe(category_analysis, use_container_width=True)
    
    # Áõ∏Èñ¢‰øÇÊï∞Ë®àÁÆó
    if 'shopee_suitability_score' in ship_data.columns:
        correlation = ship_data['ship_hours'].corr(ship_data['shopee_suitability_score'])
        
        if abs(correlation) > 0.3:
            strength = "Âº∑„ÅÑ" if abs(correlation) > 0.7 else "‰∏≠Á®ãÂ∫¶„ÅÆ"
            direction = "Ë≤†„ÅÆ" if correlation < 0 else "Ê≠£„ÅÆ"
            st.success(f"üìà **Áõ∏Èñ¢ÂàÜÊûêÁµêÊûú**: ÈÖçÈÄÅÊôÇÈñì„Å®ShopeeÈÅ©ÊÄß„Çπ„Ç≥„Ç¢„ÅÆÈñì„Å´{strength}{direction}Áõ∏Èñ¢„Åå„ÅÇ„Çä„Åæ„ÅôÔºàr = {correlation:.3f}Ôºâ")
        else:
            st.info(f"üìà **Áõ∏Èñ¢ÂàÜÊûêÁµêÊûú**: ÈÖçÈÄÅÊôÇÈñì„Å®ShopeeÈÅ©ÊÄß„Çπ„Ç≥„Ç¢„ÅÆÈñì„Å´ÊòéÁ¢∫„Å™Áõ∏Èñ¢„ÅØË¶ã„Çâ„Çå„Åæ„Åõ„ÇìÔºàr = {correlation:.3f}Ôºâ")

def render_success_prediction_analysis(df):
    """ÊàêÂäüÁéá‰∫àÊ∏¨ÂàÜÊûê"""
    st.subheader("üéØ ÊàêÂäüÁéá‰∫àÊ∏¨ÂàÜÊûê")
    
    # ÊàêÂäüÁéá‰∫àÊ∏¨„É¢„Éá„É´ÔºàÁ∞°ÊòìÁâàÔºâ
    success_factors = []
    
    total_items = len(df)
    
    # ÂêÑË¶ÅÂõ†„ÅÆË®àÁÆó
    if 'shopee_group' in df.columns:
        group_a_count = len(df[df['shopee_group'] == 'A'])
        group_a_rate = group_a_count / total_items * 100
        success_factors.append(('„Ç∞„É´„Éº„ÉóAÁéá', group_a_rate, 30, group_a_count))
    
    if 'is_prime' in df.columns:
        prime_count = len(df[df['is_prime'] == True])
        prime_rate = prime_count / total_items * 100
        success_factors.append(('PrimeÂïÜÂìÅÁéá', prime_rate, 25, prime_count))
    
    if 'ship_hours' in df.columns:
        fast_shipping_count = len(df[df['ship_hours'] <= 24])
        total_with_shipping = len(df[df['ship_hours'].notna()])
        fast_shipping_rate = fast_shipping_count / total_with_shipping * 100 if total_with_shipping > 0 else 0
        success_factors.append(('È´òÈÄüÈÖçÈÄÅÁéá', fast_shipping_rate, 20, fast_shipping_count))
    
    if 'extracted_brand' in df.columns:
        brand_count = len(df[df['extracted_brand'].notna() & (df['extracted_brand'] != '')])
        brand_coverage = brand_count / total_items * 100
        success_factors.append(('„Éñ„É©„É≥„ÉâÁâπÂÆöÁéá', brand_coverage, 15, brand_count))
    
    # ‰∫àÊ∏¨ÊàêÂäüÁéáË®àÁÆó
    base_rate = 75
    bonus_rate = 0
    
    for factor_name, rate, weight, count in success_factors:
        normalized_rate = min(rate / 100, 1.0)
        bonus_rate += normalized_rate * weight
    
    predicted_success_rate = base_rate + bonus_rate
    
    # ÊàêÂäüÁéáË°®Á§∫
    prediction_col1, prediction_col2, prediction_col3 = st.columns(3)
    
    with prediction_col1:
        st.metric("Âü∫Êú¨ÊàêÂäüÁéá", f"{base_rate}%")
    
    with prediction_col2:
        st.metric("„Éú„Éº„Éä„ÇπÊàêÂäüÁéá", f"+{bonus_rate:.1f}%")
    
    with prediction_col3:
        st.metric("‰∫àÊ∏¨Á∑èÂêàÊàêÂäüÁéá", f"{predicted_success_rate:.1f}%")
    
    # ÊàêÂäüË¶ÅÂõ†ÂàÜÊûê„ÉÅ„É£„Éº„Éà
    if success_factors:
        factor_data = []
        for factor_name, rate, weight, count in success_factors:
            factor_data.append({
                'Ë¶ÅÂõ†': factor_name,
                'ÁèæÂú®ÂÄ§(%)': rate,
                'ÈáçË¶ÅÂ∫¶': weight,
                'ÂïÜÂìÅÊï∞': count,
                'Ë≤¢ÁåÆÂ∫¶': (rate/100) * weight
            })
        
        factor_df = pd.DataFrame(factor_data)
        
        analysis_chart_col1, analysis_chart_col2 = st.columns(2)
        
        with analysis_chart_col1:
            fig1 = px.bar(
                factor_df,
                x='Ë¶ÅÂõ†',
                y='ÁèæÂú®ÂÄ§(%)',
                color='ÈáçË¶ÅÂ∫¶',
                title='ÊàêÂäüÁéáË¶ÅÂõ†ÂàÜÊûê',
                color_continuous_scale='Viridis',
                text='ÁèæÂú®ÂÄ§(%)'
            )
            fig1.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
            fig1.update_layout(height=400)
            st.plotly_chart(fig1, use_container_width=True)
        
        with analysis_chart_col2:
            fig2 = px.pie(
                factor_df,
                values='Ë≤¢ÁåÆÂ∫¶',
                names='Ë¶ÅÂõ†',
                title='ÊàêÂäüÁéá„Å∏„ÅÆË≤¢ÁåÆÂ∫¶ÂàÜÂ∏É'
            )
            fig2.update_layout(height=400)
            st.plotly_chart(fig2, use_container_width=True)
        
        # Ë©≥Á¥∞„Éá„Éº„ÇøË°®Á§∫
        st.subheader("üìä ÊàêÂäüË¶ÅÂõ†Ë©≥Á¥∞")
        display_factor_df = factor_df.copy()
        display_factor_df['ÁèæÂú®ÂÄ§(%)'] = display_factor_df['ÁèæÂú®ÂÄ§(%)'].round(1)
        display_factor_df['Ë≤¢ÁåÆÂ∫¶'] = display_factor_df['Ë≤¢ÁåÆÂ∫¶'].round(1)
        
        st.dataframe(display_factor_df, use_container_width=True)
        
        # ÊîπÂñÑÊèêÊ°à
        st.subheader("üí° ÊàêÂäüÁéáÂêë‰∏äÊèêÊ°à")
        
        improvement_suggestions = []
        
        for _, row in factor_df.iterrows():
            if row['ÁèæÂú®ÂÄ§(%)'] < 50 and row['ÈáçË¶ÅÂ∫¶'] >= 20:
                improvement_suggestions.append(f"üéØ **{row['Ë¶ÅÂõ†']}**„ÇíÂêë‰∏äÔºàÁèæÂú®{row['ÁèæÂú®ÂÄ§(%)']:.1f}%Ôºâ: ÈáçË¶ÅÂ∫¶„ÅåÈ´ò„ÅèÊîπÂñÑÂäπÊûúÂ§ß")
        
        if not improvement_suggestions:
            improvement_suggestions.append("‚úÖ ÁèæÂú®„ÅÆÂêÑË¶ÅÂõ†„ÅØËâØÂ•Ω„Å™Ê∞¥Ê∫ñ„Å´„ÅÇ„Çä„Åæ„Åô„ÄÇÁ∂ôÁ∂öÁöÑ„Å™Á∂≠ÊåÅ„ÇíÊé®Â•®„Åó„Åæ„Åô„ÄÇ")
        
        for suggestion in improvement_suggestions:
            st.info(suggestion)

def render_comprehensive_correlation_analysis(df):
    """Á∑èÂêàÁõ∏Èñ¢ÂàÜÊûê"""
    st.subheader("üîó Á∑èÂêàÁõ∏Èñ¢ÂàÜÊûê")
    
    # Êï∞ÂÄ§Âàó„ÅÆÊäΩÂá∫
    numeric_columns = []
    for col in df.columns:
        if df[col].dtype in ['int64', 'float64', 'bool']:
            if df[col].notna().sum() > 0:  # „Éá„Éº„Çø„Åå„ÅÇ„ÇãÂàó„ÅÆ„Åø
                numeric_columns.append(col)
    
    # boolÂûã„ÇíintÂûã„Å´Â§âÊèõ
    df_numeric = df[numeric_columns].copy()
    for col in df_numeric.columns:
        if df_numeric[col].dtype == 'bool':
            df_numeric[col] = df_numeric[col].astype(int)
    
    if len(numeric_columns) >= 2:
        correlation_col1, correlation_col2 = st.columns(2)
        
        with correlation_col1:
            # Áõ∏Èñ¢Ë°åÂàóË®àÁÆó
            correlation_matrix = df_numeric.corr()
            
            # „Éí„Éº„Éà„Éû„ÉÉ„Éó‰ΩúÊàê
            fig1 = px.imshow(
                correlation_matrix,
                title="ÁâπÂæ¥ÈáèÁõ∏Èñ¢„Éû„Éà„É™„ÉÉ„ÇØ„Çπ",
                color_continuous_scale='RdBu_r',
                aspect='auto',
                zmin=-1,
                zmax=1
            )
            
            fig1.update_layout(height=500)
            st.plotly_chart(fig1, use_container_width=True)
        
        with correlation_col2:
            # Âº∑„ÅÑÁõ∏Èñ¢„ÅÆÁâπÂÆö
            strong_correlations = []
            for i in range(len(correlation_matrix.columns)):
                for j in range(i+1, len(correlation_matrix.columns)):
                    corr_value = correlation_matrix.iloc[i, j]
                    if abs(corr_value) > 0.3:  # ÈñæÂÄ§„Çí0.5„Åã„Çâ0.3„Å´‰∏ã„Åí„Å¶ÊúâÁî®„Å™Áõ∏Èñ¢„ÇÇË°®Á§∫
                        strong_correlations.append({
                            'Â§âÊï∞1': correlation_matrix.columns[i],
                            'Â§âÊï∞2': correlation_matrix.columns[j],
                            'Áõ∏Èñ¢‰øÇÊï∞': round(corr_value, 3),
                            'Áõ∏Èñ¢Âº∑Â∫¶': get_correlation_strength(abs(corr_value)),
                            'ÊñπÂêë': 'Ê≠£' if corr_value > 0 else 'Ë≤†'
                        })
            
            # Áõ∏Èñ¢„ÅÆÂº∑„Åï„Åß„ÇΩ„Éº„Éà
            strong_correlations = sorted(strong_correlations, key=lambda x: abs(x['Áõ∏Èñ¢‰øÇÊï∞']), reverse=True)
            
            if strong_correlations:
                st.markdown("### üîç Ê§úÂá∫„Åï„Çå„ÅüÁõ∏Èñ¢Èñ¢‰øÇ")
                
                # ‰∏ä‰Ωç5‰ª∂„ÇíË°®Á§∫
                for i, corr in enumerate(strong_correlations[:5]):
                    strength_color = get_correlation_color(abs(corr['Áõ∏Èñ¢‰øÇÊï∞']))
                    st.markdown(f"""
                    <div style="background: {strength_color}; padding: 10px; margin: 5px 0; border-radius: 5px; color: white;">
                        <strong>{i+1}. {corr['Â§âÊï∞1']} ‚Üî {corr['Â§âÊï∞2']}</strong><br>
                        Áõ∏Èñ¢‰øÇÊï∞: {corr['Áõ∏Èñ¢‰øÇÊï∞']:.3f} ({corr['Áõ∏Èñ¢Âº∑Â∫¶']}„Éª{corr['ÊñπÂêë']}„ÅÆÁõ∏Èñ¢)
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.info("ÊòéÁ¢∫„Å™Áõ∏Èñ¢Èñ¢‰øÇÔºà|r| > 0.3Ôºâ„ÅØÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü")
        
        # Áõ∏Èñ¢Ë©≥Á¥∞„Éá„Éº„Çø
        if strong_correlations:
            st.subheader("üìä Áõ∏Èñ¢Èñ¢‰øÇË©≥Á¥∞„Éá„Éº„Çø")
            correlation_df = pd.DataFrame(strong_correlations)
            st.dataframe(correlation_df, use_container_width=True)
            
            # Áõ∏Èñ¢Èñ¢‰øÇ„ÅÆËß£Èáà
            st.subheader("üí° Áõ∏Èñ¢Èñ¢‰øÇ„ÅÆËß£Èáà")
            
            interpretations = []
            for corr in strong_correlations[:3]:  # ‰∏ä‰Ωç3‰ª∂„ÅÆ„ÅøËß£Èáà
                var1, var2 = corr['Â§âÊï∞1'], corr['Â§âÊï∞2']
                corr_val = corr['Áõ∏Èñ¢‰øÇÊï∞']
                direction = "Ê≠£" if corr_val > 0 else "Ë≤†"
                
                interpretation = generate_correlation_interpretation(var1, var2, corr_val, direction)
                interpretations.append(interpretation)
            
            for interpretation in interpretations:
                st.info(interpretation)
    else:
        st.info("Áõ∏Èñ¢ÂàÜÊûê„Å´ÂçÅÂàÜ„Å™Êï∞ÂÄ§„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì")

def get_correlation_strength(abs_corr):
    """Áõ∏Èñ¢„ÅÆÂº∑„Åï„ÇíÂà§ÂÆö"""
    if abs_corr >= 0.7:
        return "Âº∑„ÅÑ"
    elif abs_corr >= 0.5:
        return "‰∏≠Á®ãÂ∫¶"
    elif abs_corr >= 0.3:
        return "Âº±„ÅÑ"
    else:
        return "ÈùûÂ∏∏„Å´Âº±„ÅÑ"

def get_correlation_color(abs_corr):
    """Áõ∏Èñ¢„ÅÆÂº∑„Åï„Å´Âøú„Åò„ÅüËâ≤„ÇíËøî„Åô"""
    if abs_corr >= 0.7:
        return "#DC2626"  # Âº∑„ÅÑÁõ∏Èñ¢: Ëµ§
    elif abs_corr >= 0.5:
        return "#F59E0B"  # ‰∏≠Á®ãÂ∫¶: „Ç™„É¨„É≥„Ç∏
    elif abs_corr >= 0.3:
        return "#10B981"  # Âº±„ÅÑ: Á∑ë
    else:
        return "#6B7280"  # ÈùûÂ∏∏„Å´Âº±„ÅÑ: „Ç∞„É¨„Éº

def generate_correlation_interpretation(var1, var2, corr_val, direction):
    """Áõ∏Èñ¢Èñ¢‰øÇ„ÅÆËß£Èáà„ÇíÁîüÊàê"""
    abs_corr = abs(corr_val)
    strength = get_correlation_strength(abs_corr)
    
    # Â§âÊï∞Âêç„ÅÆÊó•Êú¨Ë™ûÂåñÔºàÁ∞°ÊòìÁâàÔºâ
    var_translations = {
        'shopee_suitability_score': 'ShopeeÈÅ©ÊÄß„Çπ„Ç≥„Ç¢',
        'prime_confidence_score': 'Prime‰ø°È†ºÊÄß„Çπ„Ç≥„Ç¢',
        'relevance_score': 'Èñ¢ÈÄ£ÊÄß„Çπ„Ç≥„Ç¢',
        'ship_hours': 'ÈÖçÈÄÅÊôÇÈñì',
        'is_prime': 'PrimeÂïÜÂìÅ„Éï„É©„Ç∞',
        'shopee_group': 'Shopee„Ç∞„É´„Éº„Éó'
    }
    
    var1_jp = var_translations.get(var1, var1)
    var2_jp = var_translations.get(var2, var2)
    
    if direction == "Ê≠£":
        return f"üìà **{var1_jp}**„Å®**{var2_jp}**„ÅÆÈñì„Å´„ÅØ{strength}{direction}„ÅÆÁõ∏Èñ¢„Åå„ÅÇ„Çä„Åæ„ÅôÔºàr={corr_val:.3f}Ôºâ„ÄÇ‰∏ÄÊñπ„ÅåÈ´ò„ÅÑ„Å®‰ªñÊñπ„ÇÇÈ´ò„Åè„Å™„ÇãÂÇæÂêë„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ"
    else:
        return f"üìâ **{var1_jp}**„Å®**{var2_jp}**„ÅÆÈñì„Å´„ÅØ{strength}{direction}„ÅÆÁõ∏Èñ¢„Åå„ÅÇ„Çä„Åæ„ÅôÔºàr={corr_val:.3f}Ôºâ„ÄÇ‰∏ÄÊñπ„ÅåÈ´ò„ÅÑ„Å®‰ªñÊñπ„ÅØ‰Ωé„Åè„Å™„ÇãÂÇæÂêë„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ"